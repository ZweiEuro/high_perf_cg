[gd_scene load_steps=6 format=3 uid="uid://e5ubdwu3wx6d"]

[sub_resource type="GDScript" id="GDScript_l0wnk"]
script/source = "extends Node3D

@export var triggerDuration_s: float = 1.0; # duration in seconds for it to grow
@export var emitCount: int = 1;
@onready var currentEmitCount: int = emitCount;

@export var actualScale: float = 1.0;

@onready var innerIndicator: CylinderMesh = $IndicatorInner.mesh
@onready var outerIndicator: CylinderMesh = $IndicatorOuter.mesh
@onready var counterLabel: Label3D = $CounterLabel
@onready var countDownLabel: Label3D = $CountDownLabel

@onready var lighting_prefab = preload(\"res://alt_lightning/alt_lightning.tscn\");


var startTime: float = Time.get_ticks_msec() / 1000.0; # time since start in seconds 

var indicatorInnerSize: float = 0.0;

@onready var self_delete_timer: Timer = Timer.new();

@onready var i_am_dead = false;

func _ready() -> void:
	self.scale = Vector3(actualScale, actualScale, actualScale);
	innerIndicator.top_radius = 1;
	innerIndicator.bottom_radius = 1;
	counterLabel.text = str(emitCount);
	countDownLabel.text = str(triggerDuration_s).pad_decimals(2);
	
	self_delete_timer.autostart = false;
	self_delete_timer.one_shot = true;
	self_delete_timer.timeout.connect(delete_self);

	add_child(self_delete_timer)
		
	
func delete_self() -> void:
	queue_free();
	

func emitLightning() -> void:
	var newChild: Node3D = lighting_prefab.duplicate(true).instantiate();
	
	#newChild.scale = self.scale;
	# newChild.start_point_offset *= self.scale;
	add_child(newChild);

func _process(_delta: float) -> void:
	if i_am_dead:
		return;
	
	var now = Time.get_ticks_msec() / 1000.0;
	var diff = now - startTime;
	if diff > triggerDuration_s:
		emitLightning();
		currentEmitCount -= 1;
		if currentEmitCount > 0:
			startTime = now;
			counterLabel.text = str(currentEmitCount);
		else:
			self_delete_timer.start(0.5);
			i_am_dead = true;
			return;
	var newSize = lerpf(0.0, 1.0, (diff / triggerDuration_s))
	
	countDownLabel.text = str(triggerDuration_s - diff).pad_decimals(2);
	
	innerIndicator.bottom_radius = newSize;
	innerIndicator.top_radius = newSize;
"

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_lsk4n"]
transparency = 1
albedo_color = Color(1, 0, 0, 0.541176)
disable_receive_shadows = true

[sub_resource type="CylinderMesh" id="CylinderMesh_yurot"]
resource_local_to_scene = true
material = SubResource("StandardMaterial3D_lsk4n")
top_radius = 1.0
bottom_radius = 1.0
height = 0.001

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_6v3ml"]
transparency = 1
albedo_color = Color(1, 0, 0, 1)
emission_enabled = true
emission = Color(1, 0, 0, 1)
emission_energy_multiplier = 0.87
disable_receive_shadows = true

[sub_resource type="CylinderMesh" id="CylinderMesh_e1imq"]
resource_local_to_scene = true
material = SubResource("StandardMaterial3D_6v3ml")
top_radius = 0.0
bottom_radius = 0.0
height = 0.001

[node name="Indicator" type="Node3D"]
script = SubResource("GDScript_l0wnk")

[node name="IndicatorOuter" type="MeshInstance3D" parent="."]
mesh = SubResource("CylinderMesh_yurot")

[node name="IndicatorInner" type="MeshInstance3D" parent="."]
mesh = SubResource("CylinderMesh_e1imq")
skeleton = NodePath("../IndicatorOuter")

[node name="CounterLabel" type="Label3D" parent="."]
transform = Transform3D(1, 0, 0, 0, -4.37114e-08, 1, 0, -1, -4.37114e-08, 0, 0.02, 1)
text = "1"
font_size = 55

[node name="CountDownLabel" type="Label3D" parent="."]
transform = Transform3D(1, 0, 0, 0, -4.37114e-08, 1, 0, -1, -4.37114e-08, 0, 0.02, 0)
text = "0"
font_size = 55
